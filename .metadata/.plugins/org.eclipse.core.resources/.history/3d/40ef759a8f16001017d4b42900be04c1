package com.lpu.auth_service.service;

import org.springframework.stereotype.Service;

@Service
public class JWTService {
    private final String secretKey;

    public JWTService() {
        SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256);
        this.secretKey = Base64.getEncoder().encodeToString(key.getEncoded());
    }

    public String generateToken(String username) {
        return Jwts.builder()
            .setSubject(username)
            .setIssuedAt(new Date())
            .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
            .signWith(Keys.hmacShaKeyFor(Base64.getDecoder().decode(secretKey)))
            .compact();
    }

    public boolean validateToken(String token, String username) {
        return extractUserName(token).equals(username) && !isTokenExpired(token);
    }

    public String extractUserName(String token) {
        return Jwts.parserBuilder()
            .setSigningKey(Base64.getDecoder().decode(secretKey))
            .build()
            .parseClaimsJws(token)
            .getBody()
            .getSubject();
    }

    public boolean isTokenExpired(String token) {
        return Jwts.parserBuilder()
            .setSigningKey(Base64.getDecoder().decode(secretKey))
            .build()
            .parseClaimsJws(token)
            .getBody()
            .getExpiration()
            .before(new Date());
    }
}

