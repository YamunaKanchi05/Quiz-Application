package com.lpu.api_gateway.filter;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.web.server.ResponseStatusException;
import reactor.core.publisher.Mono;

import java.nio.charset.StandardCharsets;

@Component
public class JwtAuthFilter implements GlobalFilter {

    @Value("${jwt.secret}")
    private String secretKey;

    private static final String ROLE_ADMIN = "ADMIN";
    private static final String ROLE_USER = "USER";

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        String path = exchange.getRequest().getURI().getPath();
        System.out.println("Incoming request path: " + path);

        // Use 'startsWith' to more robustly match public endpoints
        if (path.startsWith("/login") || path.startsWith("/register") ||
            path.startsWith("/auth-service/login") || path.startsWith("/auth-service/register")) {
            // Skip token validation for login and registration endpoints
            return chain.filter(exchange);
        }

        // Get the token from the Authorization header
        String authHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Missing or invalid Authorization header");
        }
        String token = authHeader.substring(7); // Remove "Bearer "

        try {
            // Validate token and extract claims
            Claims claims = Jwts.parserBuilder()
                    .setSigningKey(Keys.hmacShaKeyFor(secretKey.getBytes(StandardCharsets.UTF_8)))
                    .build()
                    .parseClaimsJws(token)
                    .getBody();

            String role = claims.get("role", String.class);
            System.out.println("Extracted role from token: " + role);

            // Role-based access control: If the endpoint is for quiz creation
            if (path.contains("/quiz-service/quiz/create") && !ROLE_ADMIN.equals(role)) {
                throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Only ADMIN can create quizzes");
            }

            // For get and submit endpoints, allow both USER and ADMIN
            if ((path.contains("/quiz-service/quiz/get/") || path.contains("/quiz-service/quiz/submit/")) &&
                    !(ROLE_USER.equals(role) || ROLE_ADMIN.equals(role))) {
                throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Access denied");
            }

            return chain.filter(exchange);
        } catch (JwtException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Invalid or expired token");
        }
    }
}
